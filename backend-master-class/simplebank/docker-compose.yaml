version: "3.9"
services:
  postgres:
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=simple_bank
  api:
    build:
      # Tell docker-compose to build the image from the current directory.
      context: .
      # Tell docker-compose to use the Dockerfile to build the image.
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      # All services in Docker-compose will run on the same network.
      # You can use the "postgres" service name to connect to the postgres container.
      - DB_SOURCE=postgresql://root:secret@postgres:5432/simple_bank?sslmode=disable
      # `depends_on` does not wait for the postgres container to be ready.
      # If you want to wait for the postgres container to be ready, you can use
      # the `wait-for` https://github.com/eficode/wait-for.
      # https://docs.docker.com/compose/startup-order/
    depends_on:
      - postgres
    # This will override the default command in the Dockerfile.
    # Wait for the postgres container to be ready, then run start.sh.
    entrypoint: ["/app/wait-for.sh", "postgres:5432", "--", "/app/start.sh"]
    # Note: Setting `entrypoint` both overrides any default entrypoint set on
    # the service’s image with the `ENTRYPOINT` Dockerfile instruction,
    # and clears out any default command on the image - meaning that
    # if there’s a `CMD` instruction in the Dockerfile, it is ignored.
    # So we need to explicitly define the command here.
    command: ["/app/main"]
